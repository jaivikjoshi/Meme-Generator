{"ast":null,"code":"var _jsxFileName = \"/Users/jaivik/Library/Mobile Documents/com~apple~CloudDocs/Personal-Projects/memegenerator/src/Components/Meme.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport memesData from \"../Data/memesData\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Meme = () => {\n  _s();\n  const [meme, setMeme] = useState({\n    randomImage: \"images/Empty.png\"\n  });\n  const [allMemes, setAllMemes] = useState(memesData);\n  useEffect(() => {\n    fetch(\"https://api.imgflip.com/get_memes\").then(res => res.json()).then(data => setAllMemes(data.data.memes));\n  }, []);\n  const randomMemeHandler = () => {\n    const memesArray = memesData.data.memes;\n    const randomNumber = Math.floor(Math.random() * memesArray.length);\n    const url = memesArray[randomNumber].url;\n    setMeme(prevMemeUrl => ({\n      ...prevMemeUrl,\n      randomImage: url\n    }));\n  };\n  return /*#__PURE__*/_jsxDEV(\"main\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"Meme\",\n      children: /*#__PURE__*/_jsxDEV(\"img\", {\n        src: meme.randomImage,\n        className: \"Random-img\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"button-div\",\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"btn\",\n        onClick: randomMemeHandler,\n        children: \"Get a New MEME IMAGE\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 27,\n    columnNumber: 9\n  }, this);\n};\n_s(Meme, \"c6TI4stAJxNAyvmEiMqxEsjtwYs=\");\n_c = Meme;\nexport default Meme;\nvar _c;\n$RefreshReg$(_c, \"Meme\");","map":{"version":3,"names":["React","useState","useEffect","memesData","jsxDEV","_jsxDEV","Meme","_s","meme","setMeme","randomImage","allMemes","setAllMemes","fetch","then","res","json","data","memes","randomMemeHandler","memesArray","randomNumber","Math","floor","random","length","url","prevMemeUrl","children","className","src","fileName","_jsxFileName","lineNumber","columnNumber","onClick","_c","$RefreshReg$"],"sources":["/Users/jaivik/Library/Mobile Documents/com~apple~CloudDocs/Personal-Projects/memegenerator/src/Components/Meme.js"],"sourcesContent":["import React, {useState, useEffect} from \"react\";\nimport memesData from \"../Data/memesData\";\nconst Meme = () => {\n    const [meme, setMeme] = useState({\n        randomImage: \"images/Empty.png\"\n    });\n\n    const [allMemes, setAllMemes] = useState(memesData);\n    \n    useEffect(() => {\n        fetch(\"https://api.imgflip.com/get_memes\")\n        .then(res => res.json())\n        .then(data => setAllMemes(data.data.memes))\n    }, [])\n\n    const randomMemeHandler = () => {\n        const memesArray = memesData.data.memes;\n        const randomNumber = Math.floor(Math.random() * memesArray.length);              \n        const url = memesArray[randomNumber].url;\n        setMeme(prevMemeUrl => ({\n            ...prevMemeUrl,\n            randomImage: url\n        }))\n    }\n\n    return (\n        <main>\n            <div className = \"Meme\">\n                <img src = {meme.randomImage} className=\"Random-img\"></img>\n            </div>\n            <div className=\"button-div\">\n                <button className=\"btn\"  onClick = {randomMemeHandler}>\n                    Get a New MEME IMAGE\n                </button>\n            </div>\n        </main>\n    )\n}\n\nexport default Meme"],"mappings":";;AAAA,OAAOA,KAAK,IAAGC,QAAQ,EAAEC,SAAS,QAAO,OAAO;AAChD,OAAOC,SAAS,MAAM,mBAAmB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAC1C,MAAMC,IAAI,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACf,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGR,QAAQ,CAAC;IAC7BS,WAAW,EAAE;EACjB,CAAC,CAAC;EAEF,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGX,QAAQ,CAACE,SAAS,CAAC;EAEnDD,SAAS,CAAC,MAAM;IACZW,KAAK,CAAC,mCAAmC,CAAC,CACzCC,IAAI,CAACC,GAAG,IAAIA,GAAG,CAACC,IAAI,CAAC,CAAC,CAAC,CACvBF,IAAI,CAACG,IAAI,IAAIL,WAAW,CAACK,IAAI,CAACA,IAAI,CAACC,KAAK,CAAC,CAAC;EAC/C,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMC,iBAAiB,GAAGA,CAAA,KAAM;IAC5B,MAAMC,UAAU,GAAGjB,SAAS,CAACc,IAAI,CAACC,KAAK;IACvC,MAAMG,YAAY,GAAGC,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,CAAC,CAAC,GAAGJ,UAAU,CAACK,MAAM,CAAC;IAClE,MAAMC,GAAG,GAAGN,UAAU,CAACC,YAAY,CAAC,CAACK,GAAG;IACxCjB,OAAO,CAACkB,WAAW,KAAK;MACpB,GAAGA,WAAW;MACdjB,WAAW,EAAEgB;IACjB,CAAC,CAAC,CAAC;EACP,CAAC;EAED,oBACIrB,OAAA;IAAAuB,QAAA,gBACIvB,OAAA;MAAKwB,SAAS,EAAG,MAAM;MAAAD,QAAA,eACnBvB,OAAA;QAAKyB,GAAG,EAAItB,IAAI,CAACE,WAAY;QAACmB,SAAS,EAAC;MAAY;QAAAE,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAM;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC1D,CAAC,eACN7B,OAAA;MAAKwB,SAAS,EAAC,YAAY;MAAAD,QAAA,eACvBvB,OAAA;QAAQwB,SAAS,EAAC,KAAK;QAAEM,OAAO,EAAIhB,iBAAkB;QAAAS,QAAA,EAAC;MAEvD;QAAAG,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACR,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACJ,CAAC;AAEf,CAAC;AAAA3B,EAAA,CAnCKD,IAAI;AAAA8B,EAAA,GAAJ9B,IAAI;AAqCV,eAAeA,IAAI;AAAA,IAAA8B,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}