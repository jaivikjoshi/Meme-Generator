{"ast":null,"code":"var _jsxFileName = \"/Users/jaivik/Library/Mobile Documents/com~apple~CloudDocs/Personal-Projects/memegenerator/src/Components/Meme.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport Text from \"./Text\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Meme = () => {\n  _s();\n  const [meme, setMeme] = useState({\n    randomImage: \"images/Empty.png\"\n  });\n  const [allMemes, setAllMemes] = useState([]);\n  useEffect(() => {\n    fetch(\"https://api.imgflip.com/get_memes\").then(res => res.json()).then(data => setAllMemes(data.data.memes));\n  }, []);\n  const randomMemeHandler = () => {\n    const randomNumber = Math.floor(Math.random() * allMemes.length);\n    const url = allMemes[randomNumber].url;\n    setMeme(prevMemeUrl => ({\n      ...prevMemeUrl,\n      randomImage: url\n    }));\n  };\n  const [countOfTextboxes, setCountOfTextboxes] = useState(0);\n  const addText = () => {\n    setCountOfTextboxes(countOfTextboxes + 1);\n  };\n  const removeText = () => {\n    setCountOfTextboxes(0);\n  };\n  return /*#__PURE__*/_jsxDEV(\"main\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"Meme\",\n      children: [/*#__PURE__*/_jsxDEV(\"img\", {\n        src: meme.randomImage,\n        className: \"Random-img\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 17\n      }, this), Array(countOfTextboxes).fill(0).map(element => /*#__PURE__*/_jsxDEV(Text, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 69\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"button-div\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"btn\",\n        onClick: randomMemeHandler,\n        children: \"Get a New MEME IMAGE\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"d-btn\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"btn-3\",\n          role: \"button\",\n          onClick: addText,\n          onDoubleClick: removeText,\n          children: \"Add Text\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 46,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"btn-3\",\n          role: \"button\",\n          children: \"Download\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 47,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 34,\n    columnNumber: 9\n  }, this);\n};\n_s(Meme, \"W/mu2L2oBOJVB/DVY4Foj3o1ASQ=\");\n_c = Meme;\nexport default Meme;\nvar _c;\n$RefreshReg$(_c, \"Meme\");","map":{"version":3,"names":["React","useState","useEffect","Text","jsxDEV","_jsxDEV","Meme","_s","meme","setMeme","randomImage","allMemes","setAllMemes","fetch","then","res","json","data","memes","randomMemeHandler","randomNumber","Math","floor","random","length","url","prevMemeUrl","countOfTextboxes","setCountOfTextboxes","addText","removeText","children","className","src","fileName","_jsxFileName","lineNumber","columnNumber","Array","fill","map","element","onClick","role","onDoubleClick","_c","$RefreshReg$"],"sources":["/Users/jaivik/Library/Mobile Documents/com~apple~CloudDocs/Personal-Projects/memegenerator/src/Components/Meme.js"],"sourcesContent":["import React, {useState, useEffect} from \"react\";\nimport Text from \"./Text\";\nconst Meme = () => {\n    const [meme, setMeme] = useState({\n        randomImage: \"images/Empty.png\"\n    });\n    const [allMemes, setAllMemes] = useState([]);\n    \n    useEffect(() => {\n        fetch(\"https://api.imgflip.com/get_memes\")\n        .then(res => res.json())\n        .then(data => setAllMemes(data.data.memes))\n    }, [])\n\n\n    const randomMemeHandler = () => {\n        const randomNumber = Math.floor(Math.random() * allMemes.length);              \n        const url = allMemes[randomNumber].url;\n        setMeme(prevMemeUrl => ({\n            ...prevMemeUrl,\n            randomImage: url\n        }))\n    }\n\n    const [countOfTextboxes, setCountOfTextboxes] = useState(0);\n\n    const addText = () => {\n        setCountOfTextboxes(countOfTextboxes + 1)\n    }\n    const removeText = () => {\n        setCountOfTextboxes(0)\n    }\n    return (\n        <main>\n            <div className = \"Meme\">\n                <img src = {meme.randomImage} className=\"Random-img\"></img>\n                {\n                    Array(countOfTextboxes).fill(0).map(element => (<Text/>))\n                }\n            </div>\n            <div className=\"button-div\">\n                <button className=\"btn\"  onClick = {randomMemeHandler} >\n                    Get a New MEME IMAGE\n                </button>\n                <div className=\"d-btn\">\n                    <button className=\"btn-3\" role=\"button\" onClick={addText} onDoubleClick={removeText}>Add Text</button>\n                    <button className=\"btn-3\" role=\"button\">Download</button>\n                </div>\n            </div>\n        </main>\n    )\n}\n\nexport default Meme"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}